var searchIndex = JSON.parse('{\
"libslide":{"doc":"libslide is the core of slide, implementing the end-to-end…","i":[[3,"Stmt","libslide","A statement in a slide program.",null,null],[12,"kind","","The kind of the statement.",0,null],[12,"vw","","Vertical whitespace present before the statement.",0,null],[3,"StmtList","","A list of statements in a slide program.",null,null],[12,"list","","The list of statements.",1,null],[3,"Span","","Describes the character span of a substring in a text.",null,null],[12,"lo","","Inclusive lower bound index of the span, in terms of…",2,null],[12,"hi","","Exclusive upper bound index of the span, in terms of…",2,null],[3,"ProgramContext","","A context for evaluating a slide program.",null,null],[12,"rule_denylist","","Rules that should not be included in the evaluation of an…",3,null],[12,"always_flatten","","Whether an expression should always be flattened before it…",3,null],[12,"lint","","Whether \\\"lint\\\"-like diagnostics should be emitted.",3,null],[3,"EvaluationResult","","Describes the result of a slide program evaluation.",null,null],[12,"simplified","","Input program statements, evaluated to as simple a form…",4,null],[12,"diagnostics","","Diagnostic",4,null],[3,"Poly","","A polynomial in integer space Z. TODO: Currently, this…",null,null],[12,"vec","","Underlying polynomial coefficient representation. The…",5,null],[3,"EmitConfig","","Configuration options for emitting a slide grammar.",null,null],[12,"bits","","",6,null],[4,"ExprPat","","A slide expression pattern.",null,null],[13,"Const","","A constant",7,null],[13,"VarPat","","Pattern matching a variable",7,null],[13,"ConstPat","","Pattern matching a constant",7,null],[13,"AnyPat","","Pattern matching any expression",7,null],[13,"BinaryExpr","","A binary expression",7,null],[13,"UnaryExpr","","A unary expression",7,null],[13,"Parend","","A paranthesized expression",7,null],[13,"Bracketed","","A bracketed expression",7,null],[4,"StmtKind","","The kind of a statement.",null,null],[13,"Expr","","An expression statement is a statement that consists…",8,null],[13,"Assignment","","An assignment binds some value to a variable. For example…",8,null],[4,"EmitFormat","","The format in which a slide grammar should be emitted.",null,null],[13,"Pretty","","Canonical, human-readable form. For example, `1+1` is…",9,null],[13,"SExpression","","S-expression form. For example, `1+1` is output as `(+ 1…",9,null],[13,"Latex","","LaTeX output form. For example, `(1 + 1)` is output as…",9,null],[13,"Debug","","Slide internal debug form. NB: this form is not stable,…",9,null],[5,"parse_expression_pattern","","Parses a tokenized slide expression pattern, emitting the…",null,[[["token",3],["vec",3]]]],[5,"parse_statement","","Parses a tokenized slide program, emitting the result and…",null,[[["token",3],["vec",3]]]],[5,"lint_expr_pat","","Lints a slide expression pattern.",null,[[["rcexprpat",3]],[["vec",3],["diagnostic",3]]]],[5,"lint_stmt","","Lints a slide statement list.",null,[[["stmtlist",3]],[["vec",3],["diagnostic",3]]]],[5,"evaluate","","Evaluates a list of statements to as simplified a form as…",null,[[["stmtlist",3],["programcontext",3]],[["result",4],["evaluationresult",3],["box",3]]]],[0,"grammar","","The primary libslide IR.",null,null],[3,"BinaryExpr","libslide::grammar","",null,null],[12,"op","","",10,null],[12,"lhs","","",10,null],[12,"rhs","","",10,null],[3,"UnaryExpr","","",null,null],[12,"op","","",11,null],[12,"rhs","","",11,null],[4,"BinaryOperator","","",null,null],[13,"Plus","","",12,null],[13,"Minus","","",12,null],[13,"Mult","","",12,null],[13,"Div","","",12,null],[13,"Mod","","",12,null],[13,"Exp","","",12,null],[4,"UnaryOperator","","",null,null],[13,"SignPositive","","",13,null],[13,"SignNegative","","",13,null],[0,"mem","","Provides memory-based utilities for slide Grammars, namely…",null,null],[3,"INTERNED_STRS","libslide::grammar::mem","Arena of interned strings.",null,null],[12,"__private_field","","",14,null],[3,"EMPTY_STR","","A static reference to an empty string.",null,null],[12,"__private_field","","",15,null],[3,"InternedStr","","An interned String type.",null,null],[12,"0","","",16,null],[3,"RcExpr","","An interned version of an expression.",null,null],[12,"expr","","The underlying expression.",17,null],[12,"span","","The original span of this expression from an input source…",17,null],[3,"RcExprPat","","An interned version of an expression.",null,null],[12,"expr","","The underlying expression.",18,null],[12,"span","","The original span of this expression from an input source…",18,null],[8,"RcExpression","","Describes a reference-counted slide expression.",null,null],[16,"Inner","","The type of expression held by Self.",19,null],[10,"is_const","","Returns whether the expression is a statically-evaluatable…",19,[[]]],[10,"is_var","","Returns whether the expression is a terminable variable…",19,[[]]],[10,"paren","","Paranthesizes `inner`.",19,[[["span",3]]]],[10,"bracket","","Brackets `inner`.",19,[[["span",3]]]],[10,"binary","","Creates an RcExpression from a BinaryExpr.",19,[[["span",3],["binaryexpr",3]]]],[10,"unary","","Creates an RcExpression from a UnaryExpr.",19,[[["span",3],["unaryexpr",3]]]],[10,"empty","","Returns an empty expression.",19,[[["span",3]]]],[10,"span","","Returns the span of the expression.",19,[[],["span",3]]],[11,"intern","","Interns a string, or returns the existing interned…",16,[[["asref",8]]]],[11,"get","","Gets the string interned at this reference.",16,[[],["string",3]]],[11,"new","","Creates a new reference-counted expression at a span.",17,[[["expr",4]]]],[11,"new","","Creates a new reference-counted expression at a span.",18,[[["exprpat",4]]]],[0,"collectors","libslide::grammar","Module `collectors` provides utilities for collecting…",null,null],[3,"VarNameCollector","libslide::grammar::collectors","",null,null],[12,"vars","","",20,null],[3,"PatternCollector","","",null,null],[12,"pats","","",21,null],[5,"collect_var_names","","Collects unique variable names in an expression.",null,[[["rcexpr",3]],[["internedstr",3],["hashset",3]]]],[5,"collect_pat_names","","Collects unique pattern names in an pattern expression.",null,[[["rcexprpat",3]],["hashset",3]]],[0,"expression_pattern","libslide::grammar","",null,null],[4,"ExprPat","libslide::grammar::expression_pattern","A slide expression pattern.",null,null],[13,"Const","","A constant",7,null],[13,"VarPat","","Pattern matching a variable",7,null],[13,"ConstPat","","Pattern matching a constant",7,null],[13,"AnyPat","","Pattern matching any expression",7,null],[13,"BinaryExpr","","A binary expression",7,null],[13,"UnaryExpr","","A unary expression",7,null],[13,"Parend","","A paranthesized expression",7,null],[13,"Bracketed","","A bracketed expression",7,null],[0,"statement","libslide::grammar","",null,null],[3,"StmtList","libslide::grammar::statement","A list of statements in a slide program.",null,null],[12,"list","","The list of statements.",1,null],[3,"StmtListIterator","","",null,null],[12,"stmts","","",22,null],[3,"Stmt","","A statement in a slide program.",null,null],[12,"kind","","The kind of the statement.",0,null],[12,"vw","","Vertical whitespace present before the statement.",0,null],[3,"Assignment","","",null,null],[12,"var","","",23,null],[12,"asgn_op","","",23,null],[12,"rhs","","",23,null],[12,"span","","",23,null],[4,"StmtKind","","The kind of a statement.",null,null],[13,"Expr","","An expression statement is a statement that consists…",8,null],[13,"Assignment","","An assignment binds some value to a variable. For example…",8,null],[4,"AssignmentOp","","",null,null],[13,"Equal","","=",24,null],[13,"AssignDefine","",":=",24,null],[4,"Expr","","",null,null],[13,"Const","","",25,null],[13,"Var","","",25,null],[13,"BinaryExpr","","",25,null],[13,"UnaryExpr","","",25,null],[13,"Parend","","An expression wrapped in parentheses",25,null],[13,"Bracketed","","An expression wrapped in brackets",25,null],[11,"new","libslide","",1,[[["vec",3],["stmt",3]]]],[11,"iter","","",1,[[],[["iter",3],["stmt",3]]]],[11,"new","","Creates a new `Stmt`.",0,[[["stmtkind",4]]]],[11,"update_with","","Update `self` with a fresh statement kind, given functions…",0,[[]]],[11,"vw","","Retrieve the number of vertical whitespace lines above…",0,[[]]],[11,"span","libslide::grammar::statement","",24,[[],["span",3]]],[11,"redefine_with","","Redefines `self` with a definition-evaluating function…",23,[[]]],[11,"complexity","","",25,[[]]],[11,"get_const","","Gets the constant value stored in this expression, if any.",25,[[],["option",4]]],[0,"transformer","libslide::grammar","",null,null],[8,"Transformer","libslide::grammar::transformer","A trait for transforming one grammar into another. This…",null,null],[10,"transform","","",26,[[]]],[8,"ExpressionTransformer","","A trait for transforming one expression into another.",null,null],[11,"transform","","",27,[[["rcexpr",3]],["rcexpr",3]]],[11,"transform_const","","",27,[[["span",3]],["rcexpr",3]]],[11,"transform_var","","",27,[[["internedstr",3],["span",3]],["rcexpr",3]]],[11,"transform_binary_op","","",27,[[["binaryoperator",4]],["binaryoperator",4]]],[11,"transform_binary","","",27,[[["span",3],["binaryexpr",3]],["rcexpr",3]]],[11,"transform_unary_op","","",27,[[["unaryoperator",4]],["unaryoperator",4]]],[11,"transform_unary","","",27,[[["unaryexpr",3],["span",3]],["rcexpr",3]]],[11,"transform_parend","","",27,[[["span",3],["rcexpr",3]],["rcexpr",3]]],[11,"transform_bracketed","","",27,[[["span",3],["rcexpr",3]],["rcexpr",3]]],[0,"visitor","libslide::grammar","Traits for visiting slide grammar trees.",null,null],[8,"StmtVisitor","libslide::grammar::visitor","Describes a statement list visitor.",null,null],[11,"visit","","",28,[[["stmtlist",3]]]],[11,"visit_stmt","","",28,[[["stmt",3]]]],[11,"visit_stmt_kind","","",28,[[["stmtkind",4]]]],[11,"visit_asgn","","",28,[[["assignment",3]]]],[11,"visit_asgn_op","","",28,[[["assignmentop",4]]]],[11,"visit_expr","","",28,[[["rcexpr",3]]]],[11,"visit_const","","",28,[[]]],[11,"visit_var","","",28,[[["internedstr",3]]]],[11,"visit_binary_op","","",28,[[["binaryoperator",4]]]],[11,"visit_binary","","",28,[[["binaryexpr",3]]]],[11,"visit_unary_op","","",28,[[["unaryoperator",4]]]],[11,"visit_unary","","",28,[[["unaryexpr",3],["span",3]]]],[11,"visit_parend","","",28,[[["span",3],["rcexpr",3]]]],[11,"visit_bracketed","","",28,[[["span",3],["rcexpr",3]]]],[8,"ExprPatVisitor","","Describes an expression pattern visitor.",null,null],[11,"visit","","",29,[[["rcexprpat",3]]]],[11,"visit_const","","",29,[[]]],[11,"visit_var_pat","","",29,[[["span",3]]]],[11,"visit_const_pat","","",29,[[["span",3]]]],[11,"visit_any_pat","","",29,[[["span",3]]]],[11,"visit_binary_op","","",29,[[["binaryoperator",4]]]],[11,"visit_binary","","",29,[[["binaryexpr",3]]]],[11,"visit_unary_op","","",29,[[["unaryoperator",4]]]],[11,"visit_unary","","",29,[[["unaryexpr",3],["span",3]]]],[11,"visit_parend","","",29,[[["span",3],["rcexprpat",3]]]],[11,"visit_bracketed","","",29,[[["span",3],["rcexprpat",3]]]],[8,"Grammar","libslide::grammar","Describes a top-level item in the libslide grammar.",null,null],[11,"precedence","","",12,[[]]],[11,"is_associative","","",12,[[]]],[11,"sub","","",10,[[]]],[11,"mult","","",10,[[]]],[11,"div","","",10,[[]]],[11,"exp","","",10,[[]]],[11,"negate","","",11,[[]]],[0,"common","libslide","Common types used by libslide.",null,null],[3,"Span","libslide::common","Describes the character span of a substring in a text.",null,null],[12,"lo","","Inclusive lower bound index of the span, in terms of…",2,null],[12,"hi","","Exclusive upper bound index of the span, in terms of…",2,null],[3,"ProgramContext","","A context for evaluating a slide program.",null,null],[12,"rule_denylist","","Rules that should not be included in the evaluation of an…",3,null],[12,"always_flatten","","Whether an expression should always be flattened before it…",3,null],[12,"lint","","Whether \\\"lint\\\"-like diagnostics should be emitted.",3,null],[7,"DUMMY_SP","","A dummy span for use in places where a span is not (yet)…",null,null],[11,"to","libslide","",2,[[["span",3]],["span",3]]],[11,"over","","",2,[[]]],[11,"with_denylist","","Set rules to exclude in evaluation.",3,[[]]],[11,"always_flatten","","Whether expressions should always be flattened during…",3,[[]]],[11,"lint","","Sets whether \\\"lint\\\"-like diagnostics should be emitted.",3,[[]]],[0,"diagnostics","","libslide\'s diagnostic module.",null,null],[3,"AssociatedDiagnostic","libslide::diagnostics","A secondary diagnostic associated with a primary…",null,null],[12,"kind","","The diagnostic kind.",30,null],[12,"span","","Source location for which the diagnostic is applicable.",30,null],[12,"msg","","Diagnostic message.",30,null],[3,"Diagnostic","","A diagnostic for slide source code.",null,null],[12,"kind","","The diagnostic kind.",31,null],[12,"code","","The diagnostic code.",31,null],[12,"span","","Source location for which the diagnostic is applicable.",31,null],[12,"title","","A summarizing title for the diagnostic.",31,null],[12,"msg","","Diagnostic message.",31,null],[12,"associated_diagnostics","","Any additional diagnostics associated with this one. The…",31,null],[12,"unspanned_associated_diagnostics","","Any additional diagnostics associated with this one, not…",31,null],[4,"DiagnosticKind","","The kind of a slide diagnostic.",null,null],[13,"Error","","An error diagnostic. Generally, this diagnostic should be…",32,null],[13,"Warning","","A warning diagnostic describes something that is not a…",32,null],[13,"Note","","A note diagnostic is a generic annotation with no specific…",32,null],[13,"Help","","A help diagnostic should instruct the user how their code…",32,null],[8,"DiagnosticRecord","","Describes a code and detailed explanation for a diagnostic.",null,null],[18,"CODE","","Diagnostic code.",33,null],[18,"EXPLANATION","","Detailed diagnostic explanation.",33,null],[8,"DiagnosticRegistry","","Describes an individual registry of slide diagnostics.",null,null],[10,"codes_with_explanations","","Retrieves all diagnostic codes owned by this registry and…",34,[[],["vec",3]]],[11,"span_err","","Creates an error diagnostic at a span.",31,[[],["diagnostic",3]]],[11,"span_warn","","Creates a warning diagnostic at a span.",31,[[],["diagnostic",3]]],[11,"with_note","","Adds a note to the diagnostic.",31,[[],["diagnostic",3]]],[11,"with_help","","Adds a help message to the diagnostic.",31,[[],["diagnostic",3]]],[11,"with_spanned_err","","Adds an error to the diagnostic, possibly at a different…",31,[[],["diagnostic",3]]],[11,"with_spanned_warn","","Adds a warning to the diagnostic, possibly at a different…",31,[[],["diagnostic",3]]],[11,"with_spanned_help","","Adds a help message to the diagnostic, possibly at a…",31,[[],["diagnostic",3]]],[11,"with_spanned_note","","Adds a note to the diagnostic, possibly at a different span.",31,[[],["diagnostic",3]]],[11,"all_codes_with_explanations","","All diagnostic codes and their explanations.",31,[[],["hashmap",3]]],[0,"scanner","libslide","Tokenizes slide programs and produces lexing diagnostics.",null,null],[3,"ScanErrors","libslide::scanner","Diagnostic errors produced by the scanner.",null,null],[3,"ScanResult","","Describes the result of tokenizing a slide program.",null,null],[12,"tokens","","Tokens of the program.",35,null],[12,"diagnostics","","Lexing diagnostics encountered while scanning the program.",35,null],[3,"Scanner","","",null,null],[12,"pos","","",36,null],[12,"input","","",36,null],[12,"leading_trivia_start","","",36,null],[12,"output","","",36,null],[12,"diagnostics","","",36,null],[5,"scan","","Scans and tokenizes a string-like slide program.",null,[[["into",8]],["scanresult",3]]],[0,"errors","","Diagnostic errors produced by the scanner.",null,null],[3,"InvalidToken","libslide::scanner::errors","Tokens in a slide program must be mathematically…",null,null],[3,"ScanErrors","","Diagnostic errors produced by the scanner.",null,null],[0,"types","libslide::scanner","Definitions of types used in the libslide scanner.",null,null],[3,"Token","libslide::scanner::types","Describes a token in a slide program.",null,null],[12,"ty","","The type of the token.",37,null],[12,"span","","The source span of the token.",37,null],[12,"full_span","","The full span of the token including its leading trivia.",37,null],[4,"TokenType","","The type of a Token.",null,null],[13,"Float","","Stores a scanned number in double precision.",38,null],[13,"Plus","","symbol",38,null],[13,"Minus","","symbol",38,null],[13,"Mult","","symbol",38,null],[13,"Div","","/ symbol",38,null],[13,"Mod","","% symbol",38,null],[13,"Exp","","^ symbol",38,null],[13,"Equal","","= symbol",38,null],[13,"AssignDefine","",":= symbol",38,null],[13,"OpenParen","","( symbol",38,null],[13,"CloseParen","",") symbol",38,null],[13,"OpenBracket","","[ symbol",38,null],[13,"CloseBracket","","] symbol",38,null],[13,"Variable","","A variable name.",38,null],[13,"VariablePattern","","A variable pattern, of form $name.",38,null],[13,"ConstPattern","","A constant pattern, of form #name.",38,null],[13,"AnyPattern","","An any pattern, of form _name.",38,null],[13,"Invalid","","An invalid token.",38,null],[13,"EOF","","End of file.",38,null],[11,"matcher","","",38,[[]]],[11,"new","","Creates a new token.",37,[[["tokentype",4]]]],[11,"new","libslide::scanner","Instantiate a new scanner.",36,[[],["scanner",3]]],[11,"peek","","",36,[[],["option",4]]],[11,"next","","",36,[[],["option",4]]],[11,"push_diag","","",36,[[["diagnostic",3]]]],[11,"push_tok","","",36,[[["tokentype",4],["into",8],["span",3]]]],[11,"collect_while","","",36,[[],["string",3]]],[11,"scan","","",36,[[]]],[11,"scan_trivia","","Scans leading trivia, including whitespace.",36,[[]]],[11,"scan_symbol","","Matches a symbol with a token and creates it.",36,[[]]],[11,"scan_num","","Scans through the content of a number to create a token of…",36,[[]]],[11,"scan_var_str","","",36,[[],["string",3]]],[11,"scan_var","","",36,[[]]],[11,"scan_var_pattern","","",36,[[]]],[11,"scan_const_pattern","","",36,[[]]],[11,"scan_any_pattern","","",36,[[]]],[0,"parser","libslide","Parses slide programs into the slide `grammar` IR and…",null,null],[5,"unclosed_delimiter","libslide::parser","Returns a diagnostic for an unclosed delimiter.",null,[[["token",3],["tt",4]],["diagnostic",3]]],[0,"errors","","Diagnostic errors produced by the parser.",null,null],[3,"ExtraTokens","libslide::parser::errors","This error fires on tokens that are not connected to the…",null,null],[3,"ExpectedExpr","","This error fires on token sequences that are expected to…",null,null],[3,"MismatchedClosingDelimiter","","All opening delimiters with closing pairs must have that…",null,null],[3,"IllegalPattern","","Patterns are illegal in a \\\"regular\\\" slide program; i.e. a…",null,null],[3,"IllegalVariable","","Variables are illegal in a slide expression pattern.",null,null],[3,"UnmatchedClosingDelimiter","","All closing delimiters with opening pairs must have that…",null,null],[3,"ParseErrors","","",null,null],[0,"expression_pattern_parser","libslide::parser","",null,null],[3,"ExpressionPatternParser","libslide::parser::expression_pattern_parser","",null,null],[12,"_input","","",39,null],[12,"diagnostics","","",39,null],[5,"parse","","Parses a tokenized slide expression pattern, emitting the…",null,[[["token",3],["vec",3]]]],[11,"new","","",39,[[["token",3],["vec",3]]]],[0,"statement_parser","libslide::parser","",null,null],[3,"ExpressionParser","libslide::parser::statement_parser","",null,null],[12,"_input","","",40,null],[12,"program","","",40,null],[12,"diagnostics","","",40,null],[5,"parse","","Parses a tokenized slide program, emitting the result and…",null,[[["token",3],["vec",3]]]],[11,"new","","",40,[[["token",3],["vec",3]]]],[11,"parse_stmt","","",40,[[],["stmt",3]]],[11,"parse_pattern","","",40,[[["span",3],["string",3]],["rcexpr",3]]],[11,"peek_content","","Returns the full content of the current (peeked) token.",40,[[]]],[8,"Parser","libslide::parser","",null,null],[16,"Expr","","",41,null],[10,"input","","",41,[[],["peekiter",3]]],[10,"parse","","",41,[[]]],[10,"parse_float","","",41,[[["span",3]]]],[10,"parse_variable","","",41,[[["span",3],["string",3]]]],[10,"parse_var_pattern","","",41,[[["span",3],["string",3]]]],[10,"parse_const_pattern","","",41,[[["span",3],["string",3]]]],[10,"parse_any_pattern","","",41,[[["span",3],["string",3]]]],[11,"parse_open_paren","","",41,[[["token",3]]]],[11,"parse_open_bracket","","",41,[[["token",3]]]],[10,"push_diag","","",41,[[["diagnostic",3]]]],[10,"has_stmt_break","","",41,[[]]],[11,"done","","",41,[[]]],[11,"expr","","",41,[[]]],[11,"peek","","",41,[[],["token",3]]],[11,"next","","",41,[[],["token",3]]],[11,"add_sub_term","","",41,[[]]],[11,"mul_divide_mod_term","","",41,[[]]],[11,"exp_term","","",41,[[]]],[11,"num_term","","",41,[[]]],[11,"extra_tokens_diag","","Creates diagnostics for extra tokens following a primary…",41,[[]]],[0,"linter","libslide","Provides linter-like diagnostics for a slide program.",null,null],[3,"LintConfig","libslide::linter","Describes the configuration to use when linting a slide…",null,null],[12,"stmt_linters","","",42,null],[12,"expr_pat_linters","","",42,null],[5,"lint_stmt","","Lints a slide statement list.",null,[[["stmtlist",3]],[["vec",3],["diagnostic",3]]]],[5,"lint_expr_pat","","Lints a slide expression pattern.",null,[[["rcexprpat",3]],[["vec",3],["diagnostic",3]]]],[0,"stmt","","Lints for a statement in a slide program.",null,null],[4,"StmtLintRule","libslide::linter::stmt","A lint rule applying to a statement in a slide program.",null,null],[13,"UnarySeriesLinter","","",43,null],[13,"RedundantNestingLinter","","",43,null],[13,"HomogenousAssignmentLinter","","",43,null],[0,"homogenous_assignment","","",null,null],[3,"HomogenousAssignmentLinter","libslide::linter::stmt::homogenous_assignment","",null,null],[12,"source","","",44,null],[12,"asgn_op","","The assignment op kind we expect to see across the…",44,null],[12,"diagnostics","","",44,null],[11,"new","","",44,[[]]],[0,"redundant_nesting","libslide::linter::stmt","",null,null],[3,"RedundantNestingLinter","libslide::linter::stmt::redundant_nesting","",null,null],[12,"source","","",45,null],[12,"diagnostics","","",45,null],[11,"new","","",45,[[]]],[11,"visit_nesting","","",45,[[["span",3],["rcexpr",3]]]],[0,"unary_series","libslide::linter::stmt","",null,null],[3,"UnarySeriesLinter","libslide::linter::stmt::unary_series","",null,null],[12,"source","","",46,null],[12,"diagnostics","","",46,null],[11,"new","","",46,[[]]],[11,"lint","libslide::linter::stmt","",43,[[["stmtlist",3]],[["vec",3],["diagnostic",3]]]],[11,"all_explanations","","",43,[[],["vec",3]]],[0,"expr_pat","libslide::linter","Lints for an expression pattern in a slide program.",null,null],[4,"ExprPatLintRule","libslide::linter::expr_pat","A lint rule applying to a statement in a slide program.",null,null],[13,"SimilarNamesLinter","","",47,null],[0,"similar_names","","",null,null],[3,"NameCollection","libslide::linter::expr_pat::similar_names","",null,null],[12,"var_pat","","",48,null],[12,"const_pat","","",48,null],[12,"any_pat","","",48,null],[3,"SimilarNamesLinter","","",null,null],[12,"names","","",49,null],[4,"NameKind","","",null,null],[13,"Var","","",50,null],[13,"Const","","",50,null],[13,"Any","","",50,null],[11,"used_patterns","","",48,[[],[["btreeset",3],["namekind",4]]]],[11,"has_conflicts","","",48,[[]]],[11,"all_spans_sorted","","",48,[[],["vec",3]]],[11,"check_names","","",49,[[],[["vec",3],["diagnostic",3]]]],[11,"lint","libslide::linter::expr_pat","",47,[[["rcexprpat",3]],[["vec",3],["diagnostic",3]]]],[11,"all_explanations","","",47,[[],["vec",3]]],[8,"LintRule","libslide::linter","Describes a slide program linter. A `Linter` is…",null,null],[10,"lint","","Lints a grammar given the original source code of the…",51,[[],[["vec",3],["diagnostic",3]]]],[0,"partial_evaluator","libslide","libslide\'s heavy-lifting optimizer, applying…",null,null],[3,"EvaluationResult","libslide::partial_evaluator","Describes the result of a slide program evaluation.",null,null],[12,"simplified","","Input program statements, evaluated to as simple a form…",4,null],[12,"diagnostics","","Diagnostic",4,null],[5,"evaluate","","Evaluates a list of statements to as simplified a form as…",null,[[["stmtlist",3],["programcontext",3]],[["result",4],["evaluationresult",3],["box",3]]]],[5,"evaluate_expr","","Evaluates an expression to as simplified a form as…",null,[[["rcexpr",3],["programcontext",3]],["rcexpr",3]]],[5,"build_rules","","Given an evaluator context, builds a set of evaluator…",null,[[["programcontext",3]],[["vec",3],["result",4],["buildruleerrors",3]]]],[0,"errors","","Diagnostic errors produced by the partial evaluator.",null,null],[3,"IncompatibleDefinitions","libslide::partial_evaluator::errors","This error is fired on variable definitions provided to a…",null,null],[3,"MaybeIncompatibleDefinitions","","This warning is fired on variable definitions that may be…",null,null],[3,"PartialEvaluatorErrors","","",null,null],[0,"compare","libslide::partial_evaluator","Module `compare` compares expressions for equality.",null,null],[4,"EqRelation","libslide::partial_evaluator::compare","Describes the equivalence relation between two expressions.",null,null],[13,"AlwaysEquivalent","","The expressions are always equivalent.",52,null],[13,"NeverEquivalent","","The expressions are never equivalent.",52,null],[13,"DependsOn","","The equality of the two expressions depends on some…",52,null],[5,"cmp_eq","","Compares two expressions for equivalence, returning an…",null,[[["rcexpr",3],["programcontext",3]],["eqrelation",4]]],[0,"flatten","libslide::partial_evaluator","This module tries to flatten expressions as far as…",null,null],[5,"flatten_expr","libslide::partial_evaluator::flatten","Attempts to flatten an expression, folding constant…",null,[[["rcexpr",3]],["rcexpr",3]]],[5,"flatten_add_or_sub","","Flattens an addition or subtraction, folding constants and…",null,[[["rcexpr",3]],["rcexpr",3]]],[5,"flatten_mul_or_div","","Flattens a multiplication or division, folding constants…",null,[[["rcexpr",3]],["rcexpr",3]]],[5,"unwrap_expr","","Unwraps an expression in parentheses/brackets, or returns…",null,[[["rcexpr",3]],["rcexpr",3]]],[0,"validate","libslide::partial_evaluator","Validates that evaluated slide programs are well-formed.…",null,null],[4,"PEValidator","libslide::partial_evaluator::validate","",null,null],[13,"IncompatibleDefinitionsValidator","","",53,null],[5,"validate","","",null,[[["programcontext",3],["stmtlist",3]],[["vec",3],["diagnostic",3]]]],[0,"incompatible_definitions","","Detects incompatible variable definitions in a slide…",null,null],[3,"IncompatibleDefinitionsValidator","libslide::partial_evaluator::validate::incompatible_definitions","",null,null],[12,"asgns","","",54,null],[7,"MAX_DEFINITION_PAIRS","","Max number of definition pairs we generate diagnostics for.",null,null],[11,"all_ordered_definition_pairs","","",54,[[],["vec",3]]],[11,"validate","","",54,[[["programcontext",3]],[["vec",3],["diagnostic",3]]]],[8,"Validator","libslide::partial_evaluator::validate","",null,null],[10,"validate","","",55,[[["programcontext",3],["stmtlist",3]],[["vec",3],["diagnostic",3]]]],[11,"validate","","",53,[[["programcontext",3],["stmtlist",3]],[["vec",3],["diagnostic",3]]]],[0,"variable_expand","libslide::partial_evaluator","This module expands variables in expressions to their…",null,null],[3,"EagerVariableExpander","libslide::partial_evaluator::variable_expand","Eagerly expands variables in an expression.",null,null],[12,"expr","","",56,null],[12,"expand_def","","",56,null],[3,"LazyVariableExpander","","Lazily expands variables in an expression.",null,null],[12,"expr","","",57,null],[12,"expand_defs","","",57,null],[8,"VariableExpander","","",null,null],[10,"new","","Creates a new VariableExpander from an expression to expand.",58,[[["rcexpr",3]]]],[10,"expand","","Expands the variables matching the lhs of `asgn` with the…",58,[[["assignment",3]]]],[10,"finish","","Consumes `self` and returns the owned expression with any…",58,[[],["rcexpr",3]]],[0,"evaluator_rules","libslide","Grammar->Grammar transforming rules, used by the…",null,null],[0,"pattern_match","libslide::evaluator_rules","",null,null],[3,"PatternMatch","libslide::evaluator_rules::pattern_match","Represents pattern-matched replacements betwen a rule and…",null,null],[12,"map","","",59,null],[8,"MatchRule","","",null,null],[10,"match_rule","","Pattern matches a rule template against an expression. If…",60,[[["rcexprpat",3]],[["patternmatch",3],["option",4]]]],[11,"try_merge","","Merges two `PatternMatch`. If the `PatternMatch` are of…",59,[[["patternmatch",3]],[["patternmatch",3],["option",4]]]],[11,"insert","","",59,[[["rcexprpat",3]],["option",4]]],[0,"registry","libslide::evaluator_rules","",null,null],[3,"RuleSet","libslide::evaluator_rules::registry","Set of unbuilt rules.",null,null],[12,"rules","","",61,null],[12,"custom_rules","","",61,null],[3,"BuildRuleErrors","","",null,null],[12,"errors","","",62,null],[4,"RuleName","","",null,null],[13,"UnwrapExplicitParens","","",63,null],[13,"UnwrapExplicitBrackets","","",63,null],[13,"Add","","",63,null],[13,"Subtract","","",63,null],[13,"Multiply","","",63,null],[13,"Divide","","",63,null],[13,"Modulo","","",63,null],[13,"Exponentiate","","",63,null],[13,"Posate","","",63,null],[13,"Negate","","",63,null],[13,"MultiplicateIdentity","","",63,null],[13,"AdditiveIdentity","","",63,null],[13,"AdditiveInverse","","",63,null],[13,"SubtractiveIdentity","","",63,null],[13,"ReorderConstants","","",63,null],[13,"DistributeNegation","","",63,null],[13,"FoldNegatedAddition","","",63,null],[13,"FoldDivision","","",63,null],[13,"FoldExponents","","",63,null],[13,"ExponentiativeIdentity","","",63,null],[5,"get_all_rules","","",null,[[],[["rulename",4],["hashmap",3],["unbuiltrule",4]]]],[0,"fn_rules","","",null,null],[5,"add","libslide::evaluator_rules::registry::fn_rules","",null,[[["rcexpr",3]],[["option",4],["rcexpr",3]]]],[5,"subtract","","",null,[[["rcexpr",3]],[["option",4],["rcexpr",3]]]],[5,"multiply","","",null,[[["rcexpr",3]],[["option",4],["rcexpr",3]]]],[5,"divide","","",null,[[["rcexpr",3]],[["option",4],["rcexpr",3]]]],[5,"modulo","","",null,[[["rcexpr",3]],[["option",4],["rcexpr",3]]]],[5,"exponentiate","","",null,[[["rcexpr",3]],[["option",4],["rcexpr",3]]]],[5,"posate","","",null,[[["rcexpr",3]],[["option",4],["rcexpr",3]]]],[5,"negate","","",null,[[["rcexpr",3]],[["option",4],["rcexpr",3]]]],[11,"build","libslide::evaluator_rules::registry","Creates a list of `Rules`s from the unbuilt rule set.",61,[[],[["vec",3],["result",4],["buildruleerrors",3]]]],[11,"remove","","Remove a named rule from the rule set.",61,[[["rulename",4]]]],[11,"insert_custom","","Insert a custom unbuilt rule into the rule set.",61,[[["into",8],["unbuiltrule",4]]]],[11,"get_bootstrapping_rules","","Retrieves a set of rules to be used in bootstrapping other…",61,[[],[["vec",3],["rule",4]]]],[11,"get_boostrap_blacklist","","Retrieves a set of rules to be excluded from being…",61,[[],[["hashset",3],["option",4]]]],[0,"rule","libslide::evaluator_rules","",null,null],[3,"PatternMap","libslide::evaluator_rules::rule","A mapping between two expression patterns.",null,null],[12,"from","","",64,null],[12,"to","","",64,null],[3,"UnresolvedMapping","","",null,null],[12,"map","","",65,null],[12,"unresolved_pats","","",65,null],[4,"Rule","","",null,null],[13,"PatternMap","","",66,null],[13,"Evaluate","","",66,null],[5,"fn_name","","",null,[[]]],[11,"from_str","","Converts a string representation of a rule to a…",64,[[]]],[11,"bootstrap","","Bootstraps a `PatternMap` rule with a one-pass application…",64,[[]]],[11,"validate","","Checks a `PatternMap` is resolvable, returning an error if…",64,[[],[["unresolvedmapping",3],["result",4]]]],[11,"from_fn","","",66,[[]]],[11,"from_str","","",66,[[]]],[0,"unbuilt_rule","libslide::evaluator_rules","",null,null],[4,"UnbuiltRule","libslide::evaluator_rules::unbuilt_rule","An unbuilt rule, generally used to express a rule in a…",null,null],[13,"S","","An expression-mapping rule.",67,null],[13,"M","","Multiple string rules. This should be used by rules that…",67,null],[13,"F","","A function rule.",67,null],[0,"math","libslide","A collection of algorithms used by evaluation rules.",null,null],[0,"fraction","libslide::math","",null,null],[3,"Dec2FracError","libslide::math::fraction","",null,null],[12,"num_iter","","",68,null],[12,"decimal_error","","",68,null],[5,"dec2frac","","Converts a decimal number to its irreducible fractional…",null,[[],[["result",4],["dec2fracerror",3]]]],[6,"Fraction","","Represents a fraction, consisting of a numerator and…",null,null],[0,"gcd","libslide::math","",null,null],[5,"gcd","libslide::math::gcd","Calculates the GCD for (u, v) ∈ (Z, Z).",null,[[["primint",8],["unsigned",8]],[["primint",8],["unsigned",8]]]],[5,"binary_gcd","","The Binary GCD algorithm, or Stein\'s algorithm.…",null,[[["primint",8],["unsigned",8]],[["primint",8],["unsigned",8]]]],[5,"euclidean_gcd","","The Euclidean GCD algorithm. Implemented ∀ (u, v) ∈ (Z, Z).",null,[[["primint",8],["unsigned",8]],[["primint",8],["unsigned",8]]]],[0,"poly","libslide::math","",null,null],[3,"Poly","libslide::math::poly","A polynomial in integer space Z. TODO: Currently, this…",null,null],[12,"vec","","Underlying polynomial coefficient representation. The…",5,null],[5,"term_and_pow_from_expr","","Gets the term and power of an expression. Returns None if…",null,[[["rcexpr",3]],[["string",3],["result",4]]]],[11,"new","libslide","Creates a new Poly from a vector of coefficients, with the…",5,[[["vec",3]]]],[11,"empty","","Creates an empty Poly.",5,[[]]],[11,"is_zero","","Returns whether the polynomial is equivalent to 0.",5,[[]]],[11,"is_one","","Returns whether the polynomial is equivalent to 1.",5,[[]]],[11,"deg","","Returns the degree of the polynomial.",5,[[]]],[11,"primitive","","Returns the primitive polynomial of `self` over the…",5,[[]]],[11,"add_term","","Adds a term of form `coeff`x^`pow` to `self`.",5,[[]]],[11,"mul_term","","Multiplies a term of form `coeff`x^`pow` to `self`.",5,[[]]],[11,"mul_scalar","","Multiplies each term in the polynomial by a scalar.",5,[[]]],[11,"div_scalar","","Divides each term in the polynomial by a scalar. If the…",5,[[],["result",4]]],[11,"sub","","Subtracts `other` from `self`, yielding a new polynomial.",5,[[]]],[11,"truncate_zeros","","Removes leading zero terms in a polynomial.",5,[[]]],[11,"div","","Divides one polynomial by another, returning a tuple of…",5,[[["poly",3]],["result",4]]],[11,"max_norm","","Returns the max norm of a polynomial. This is equivalent…",5,[[]]],[11,"lc","","Returns the leading coefficient, i.e. the coefficient of…",5,[[]]],[11,"eval","","Evaluates the polynomial at a value `x`.",5,[[]]],[11,"from_expr","","Transforms an expression into a polynomial relative to…",5,[[["rcexpr",3],["option",4]],[["string",3],["result",4]]]],[11,"to_expr","","Converts a Poly polynomial, relative to some term, into an…",5,[[["rcexpr",3],["span",3]],["rcexpr",3]]],[11,"to_string","","Prints the Poly as a polynomial string.",5,[[],["string",3]]],[0,"gcd_poly_zz","libslide::math","",null,null],[5,"gcd_poly_zz_heu","libslide::math::gcd_poly_zz","Calculates the GCD of two polynomials, `f` and `g`, in ZZ…",null,[[["poly",3]],["result",4]]],[5,"poly_coeffs_gcd","","Returns the GCD of a polynomial\'s term coefficients.",null,[[["poly",3]]]],[5,"poly_extract_common","","Extracts a constant coefficient from two polynomials.…",null,[[["poly",3]]]],[5,"trivial_gcd","","Handles trivial polynomial GCD cases, namely if one…",null,[[["poly",3]],["option",4]]],[5,"gcd_interpolate","","Interpolates step-wise gcd of h and x into a polynomial.",null,[[],["poly",3]]],[0,"emit","libslide","Emit strategies for the libslide grammar IR.",null,null],[3,"EmitConfig","libslide::emit","Configuration options for emitting a slide grammar.",null,null],[12,"bits","","",6,null],[4,"EmitFormat","","The format in which a slide grammar should be emitted.",null,null],[13,"Pretty","","Canonical, human-readable form. For example, `1+1` is…",9,null],[13,"SExpression","","S-expression form. For example, `1+1` is output as `(+ 1…",9,null],[13,"Latex","","LaTeX output form. For example, `(1 + 1)` is output as…",9,null],[13,"Debug","","Slide internal debug form. NB: this form is not stable,…",9,null],[5,"emit_pretty","","",null,[[["emitconfig",3]],["string",3]]],[5,"emit_latex","","",null,[[["emitconfig",3]],["string",3]]],[5,"join_emits","","",null,[[],["string",3]]],[5,"vert_lines","","",null,[[],["string",3]]],[8,"Emit","","Implements the emission of a type in an EmitFormat.",null,null],[11,"emit","","Emit `self` with the given EmitFormat.",69,[[["emitformat",4],["emitconfig",3]],["string",3]]],[10,"emit_pretty","","Emit `self` with the pretty emit format",69,[[["emitconfig",3]],["string",3]]],[11,"emit_debug","","Emit `self` with the debug emit format",69,[[["emitconfig",3]],["string",3]]],[10,"emit_s_expression","","Emit `self` with the s_expression emit format",69,[[["emitconfig",3]],["string",3]]],[10,"emit_latex","","Emit `self` with the LaTeX emit format",69,[[["emitconfig",3]],["string",3]]],[11,"emit_wrapped_latex","","Same as emit_latex, but wraps the latex code in inline…",69,[[["emitconfig",3]],["string",3]]],[18,"FRAC","libslide","Emit divisions as fractions. Applies to LaTeX emit.",6,null],[18,"IMPLICIT_MULT","","Emits multiplications implicitly where possible. For…",6,null],[18,"TIMES","","Emits multiplication signs as \\\"\\\\times\\\". Applies to LaTeX…",6,null],[18,"DIV","","Emits divisions as \\\"\\\\div\\\". Applies to LaTeX emit.",6,null],[11,"empty","","Returns an empty set of flags",6,[[],["emitconfig",3]]],[11,"all","","Returns the set containing all flags.",6,[[],["emitconfig",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",6,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",6,[[],[["option",4],["emitconfig",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",6,[[],["emitconfig",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",6,[[],["emitconfig",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",6,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",6,[[["emitconfig",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",6,[[["emitconfig",3]]]],[11,"insert","","Inserts the specified flags in-place.",6,[[["emitconfig",3]]]],[11,"remove","","Removes the specified flags in-place.",6,[[["emitconfig",3]]]],[11,"toggle","","Toggles the specified flags in-place.",6,[[["emitconfig",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",6,[[["emitconfig",3]]]],[0,"utils","","Library utilities.",null,null],[0,"grammar","libslide::utils","",null,null],[4,"UnflattenStrategy","libslide::utils::grammar","",null,null],[13,"Left","","",70,null],[13,"Right","","",70,null],[5,"get_symmetric_expressions","","",null,[[["rcexpr",3]],[["vec",3],["rcexpr",3]]]],[5,"get_flattened_binary_args","","",null,[[["rcexpr",3],["binaryoperator",4]],[["vec",3],["rcexpr",3]]]],[5,"negate","","",null,[[["rcexpr",3]],["rcexpr",3]]],[5,"unflatten_binary_expr","","",null,[[["binaryoperator",4],["unflattenstrategy",4]]]],[5,"normalize","","",null,[[["rcexpr",3]],["rcexpr",3]]],[0,"hash","libslide::utils","",null,null],[5,"hash","libslide::utils::hash","",null,[[]]],[0,"iter","libslide::utils","",null,null],[3,"PeekingTakeWhile","libslide::utils::iter","A `TakeWhile`-like struct that tests a predicate by…",null,null],[12,"peeker","","A mutable reference to the underlying iterator is taken…",71,null],[12,"predicate","","",71,null],[3,"PeekIter","","An iterator that supports arbitrary-length peeking.",null,null],[12,"iter","","",72,null],[12,"lookahead","","A store of items we had to consume from the iterator for…",72,null],[11,"new","","",72,[[["intoiter",3]]]],[11,"peek","","Returns a reference to the next value in the iterator,…",72,[[],["option",4]]],[11,"peek_map_n","","Returns a deque of up to `n` peeked items mapped over a…",72,[[],["vecdeque",3]]],[11,"push_front","","Adds an item to the front of the current iteration.",72,[[]]],[0,"string","libslide::utils","",null,null],[5,"indent","libslide::utils::string","Indents all lines of a string with `n` spaces.",null,[[["string",3],["into",8]],["string",3]]],[8,"StringUtils","","",null,null],[10,"substring","","",73,[[]]],[0,"test","libslide::utils","",null,null],[8,"Grammar","libslide","Describes a top-level item in the libslide grammar.",null,null],[8,"Emit","","Implements the emission of a type in an EmitFormat.",null,null],[11,"emit","libslide::emit","Emit `self` with the given EmitFormat.",69,[[["emitformat",4],["emitconfig",3]],["string",3]]],[10,"emit_pretty","libslide","Emit `self` with the pretty emit format",69,[[["emitconfig",3]],["string",3]]],[11,"emit_debug","libslide::emit","Emit `self` with the debug emit format",69,[[["emitconfig",3]],["string",3]]],[10,"emit_s_expression","libslide","Emit `self` with the s_expression emit format",69,[[["emitconfig",3]],["string",3]]],[10,"emit_latex","","Emit `self` with the LaTeX emit format",69,[[["emitconfig",3]],["string",3]]],[11,"emit_wrapped_latex","libslide::emit","Same as emit_latex, but wraps the latex code in inline…",69,[[["emitconfig",3]],["string",3]]],[14,"intern_str","libslide","Interns a string.",null,null],[14,"rc_expr","","Interns an expression.",null,null],[14,"rc_expr_pat","","Interns an expression.",null,null],[14,"poly","","Creates a new Poly.",null,null],[14,"parse_stmt","","Parses a statement.",null,null],[14,"parse_expr","","Parses an expression.",null,null],[14,"parse_asgn","","Parses an assignment.",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","libslide::grammar","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","libslide::grammar::mem","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"to_string","","",16,[[],["string",3]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"to_string","","",17,[[],["string",3]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","libslide::grammar::collectors","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","libslide::grammar::statement","",22,[[]]],[11,"into","","",22,[[]]],[11,"into_iter","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"to_string","","",23,[[],["string",3]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"to_string","","",24,[[],["string",3]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","libslide::diagnostics","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","libslide::scanner","",74,[[]]],[11,"into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","libslide::scanner::errors","",75,[[]]],[11,"into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","libslide::scanner::types","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"to_string","","",37,[[],["string",3]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"to_string","","",38,[[],["string",3]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","libslide::parser::errors","",76,[[]]],[11,"into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","libslide::parser::expression_pattern_parser","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","libslide::parser::statement_parser","",40,[[]]],[11,"into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","libslide::linter","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","libslide::linter::stmt","",43,[[]]],[11,"into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","libslide::linter::stmt::homogenous_assignment","",44,[[]]],[11,"into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","libslide::linter::stmt::redundant_nesting","",45,[[]]],[11,"into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","libslide::linter::stmt::unary_series","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","libslide::linter::expr_pat","",47,[[]]],[11,"into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","libslide::linter::expr_pat::similar_names","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_string","","",50,[[],["string",3]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","libslide::partial_evaluator::errors","",83,[[]]],[11,"into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","libslide::partial_evaluator::compare","",52,[[]]],[11,"into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","libslide::partial_evaluator::validate","",53,[[]]],[11,"into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","libslide::partial_evaluator::validate::incompatible_definitions","",54,[[]]],[11,"into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","libslide::partial_evaluator::variable_expand","",56,[[]]],[11,"into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","libslide::evaluator_rules::pattern_match","",59,[[]]],[11,"into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","libslide::evaluator_rules::registry","",61,[[]]],[11,"into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_string","","",62,[[],["string",3]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","libslide::evaluator_rules::rule","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"to_string","","",64,[[],["string",3]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_string","","",65,[[],["string",3]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_string","","",66,[[],["string",3]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","libslide::evaluator_rules::unbuilt_rule","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","libslide::math::fraction","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_string","","",68,[[],["string",3]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","libslide::utils::grammar","",70,[[]]],[11,"into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","libslide::utils::iter","",71,[[]]],[11,"into","","",71,[[]]],[11,"into_iter","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"into_iter","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"is_const","libslide::grammar::mem","",17,[[]]],[11,"is_var","","",17,[[]]],[11,"paren","","",17,[[["rcexpr",3],["span",3]]]],[11,"bracket","","",17,[[["rcexpr",3],["span",3]]]],[11,"binary","","",17,[[["span",3],["binaryexpr",3]]]],[11,"unary","","",17,[[["span",3],["unaryexpr",3]]]],[11,"empty","","",17,[[["span",3]]]],[11,"span","","",17,[[],["span",3]]],[11,"is_const","","",18,[[]]],[11,"is_var","","",18,[[]]],[11,"paren","","",18,[[["rcexprpat",3],["span",3]]]],[11,"bracket","","",18,[[["rcexprpat",3],["span",3]]]],[11,"binary","","",18,[[["span",3],["binaryexpr",3]]]],[11,"unary","","",18,[[["span",3],["unaryexpr",3]]]],[11,"empty","","",18,[[["span",3]]]],[11,"span","","",18,[[],["span",3]]],[11,"transform","libslide::evaluator_rules::pattern_match","Transforms a pattern expression into an expression by…",59,[[["rcexprpat",3]],["rcexpr",3]]],[11,"transform","","",59,[[["rcexprpat",3]],["rcexprpat",3]]],[11,"transform","libslide::evaluator_rules::rule","Attempts to apply a rule on a target expression by",66,[[["rcexpr",3]],["rcexpr",3]]],[11,"transform","","Bootstraps a rule with another (or possibly the same) rule.",66,[[["rcexprpat",3]],["rcexprpat",3]]],[11,"transform_var","libslide::partial_evaluator::variable_expand","",56,[[["internedstr",3],["span",3]],["rcexpr",3]]],[11,"transform_var","","",57,[[["internedstr",3],["span",3]],["rcexpr",3]]],[11,"visit_var","libslide::grammar::collectors","",20,[[["internedstr",3]]]],[11,"visit_asgn_op","libslide::linter::stmt::homogenous_assignment","",44,[[["assignmentop",4]]]],[11,"visit_parend","libslide::linter::stmt::redundant_nesting","",45,[[["span",3],["rcexpr",3]]]],[11,"visit_bracketed","","",45,[[["span",3],["rcexpr",3]]]],[11,"visit_unary","libslide::linter::stmt::unary_series","",46,[[["unaryexpr",3],["span",3]]]],[11,"visit_asgn","libslide::partial_evaluator::validate::incompatible_definitions","",54,[[["assignment",3]]]],[11,"visit_var_pat","libslide::grammar::collectors","",21,[[["span",3]]]],[11,"visit_const_pat","","",21,[[["span",3]]]],[11,"visit_any_pat","","",21,[[["span",3]]]],[11,"visit_var_pat","libslide::linter::expr_pat::similar_names","",49,[[["span",3]]]],[11,"visit_const_pat","","",49,[[["span",3]]]],[11,"visit_any_pat","","",49,[[["span",3]]]],[11,"codes_with_explanations","libslide::scanner","",74,[[],["vec",3]]],[11,"codes_with_explanations","libslide::parser::errors","",82,[[],["vec",3]]],[11,"codes_with_explanations","libslide::linter","All lint codes and their explanations.",42,[[],["vec",3]]],[11,"codes_with_explanations","libslide::partial_evaluator::errors","",85,[[],["vec",3]]],[11,"input","libslide::parser::expression_pattern_parser","",39,[[],["peekiter",3]]],[11,"push_diag","","",39,[[["diagnostic",3]]]],[11,"parse","","",39,[[],["rcexprpat",3]]],[11,"parse_float","","",39,[[["span",3]]]],[11,"parse_variable","","",39,[[["span",3],["string",3]]]],[11,"parse_var_pattern","","",39,[[["span",3],["string",3]]]],[11,"parse_const_pattern","","",39,[[["span",3],["string",3]]]],[11,"parse_any_pattern","","",39,[[["span",3],["string",3]]]],[11,"has_stmt_break","","",39,[[]]],[11,"input","libslide::parser::statement_parser","",40,[[],["peekiter",3]]],[11,"push_diag","","",40,[[["diagnostic",3]]]],[11,"parse","","",40,[[],["stmtlist",3]]],[11,"parse_float","","",40,[[["span",3]]]],[11,"parse_variable","","",40,[[["span",3],["string",3]]]],[11,"parse_var_pattern","","",40,[[["span",3],["string",3]]]],[11,"parse_const_pattern","","",40,[[["span",3],["string",3]]]],[11,"parse_any_pattern","","",40,[[["span",3],["string",3]]]],[11,"has_stmt_break","","Do we have another statement (on a newline)?",40,[[]]],[11,"lint","libslide::linter::stmt::homogenous_assignment","",44,[[["stmtlist",3]],[["vec",3],["diagnostic",3]]]],[11,"lint","libslide::linter::stmt::redundant_nesting","",45,[[["stmtlist",3]],[["vec",3],["diagnostic",3]]]],[11,"lint","libslide::linter::stmt::unary_series","",46,[[["stmtlist",3]],[["vec",3],["diagnostic",3]]]],[11,"lint","libslide::linter::expr_pat::similar_names","",49,[[["rcexprpat",3]],[["vec",3],["diagnostic",3]]]],[11,"validate","libslide::partial_evaluator::validate::incompatible_definitions","",54,[[["programcontext",3],["stmtlist",3]],[["vec",3],["diagnostic",3]]]],[11,"new","libslide::partial_evaluator::variable_expand","",56,[[["rcexpr",3]]]],[11,"expand","","",56,[[["assignment",3]]]],[11,"finish","","",56,[[],["rcexpr",3]]],[11,"new","","",57,[[["rcexpr",3]]]],[11,"expand","","",57,[[["assignment",3]]]],[11,"finish","","",57,[[],["rcexpr",3]]],[11,"match_rule","libslide::evaluator_rules::pattern_match","",59,[[["rcexprpat",3],["rcexpr",3]],[["patternmatch",3],["option",4]]]],[11,"match_rule","","",59,[[["rcexprpat",3]],[["patternmatch",3],["option",4]]]],[11,"emit_pretty","libslide::grammar::mem","",17,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",17,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",17,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",18,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",18,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",18,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","libslide","",1,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",1,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",1,[[["emitconfig",3]],["string",3]]],[11,"emit_wrapped_latex","","",1,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",8,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",8,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",8,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",0,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",0,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",0,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","libslide::grammar::statement","",24,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",24,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",24,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",23,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",23,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",23,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",25,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",25,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",25,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","libslide::grammar","",12,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",12,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",12,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",10,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",10,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",10,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",10,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",10,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",10,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",13,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",13,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",13,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",11,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",11,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",11,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",11,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",11,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",11,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","libslide","",7,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",7,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",7,[[["emitconfig",3]],["string",3]]],[11,"as_ref","libslide::grammar::mem","",17,[[],["expr",4]]],[11,"as_ref","","",18,[[],["exprpat",4]]],[11,"from","libslide","",8,[[["rcexpr",3]]]],[11,"from","","",8,[[["assignment",3]]]],[11,"from","libslide::grammar::statement","",25,[[]]],[11,"from","libslide","",2,[[]]],[11,"from","","",2,[[["range",3]]]],[11,"from","libslide::evaluator_rules::unbuilt_rule","",67,[[]]],[11,"from","libslide","",5,[[["vec",3]],["poly",3]]],[11,"from","","",5,[[["vec",3]],["poly",3]]],[11,"from","","",9,[[["string",3]]]],[11,"from","","",6,[[["string",3],["vec",3]]]],[11,"extend","","",6,[[["intoiterator",8]]]],[11,"into_iter","","",1,[[]]],[11,"next","libslide::grammar::statement","",22,[[],["option",4]]],[11,"next","libslide::utils::iter","",71,[[],["option",4]]],[11,"next","","",72,[[],["option",4]]],[11,"clone","libslide::grammar::mem","",16,[[],["internedstr",3]]],[11,"clone","","",17,[[],["rcexpr",3]]],[11,"clone","","",18,[[],["rcexprpat",3]]],[11,"clone","libslide","",7,[[],["exprpat",4]]],[11,"clone","","",1,[[],["stmtlist",3]]],[11,"clone","","",8,[[],["stmtkind",4]]],[11,"clone","","",0,[[],["stmt",3]]],[11,"clone","libslide::grammar::statement","",24,[[],["assignmentop",4]]],[11,"clone","","",23,[[],["assignment",3]]],[11,"clone","","",25,[[],["expr",4]]],[11,"clone","libslide::grammar","",12,[[],["binaryoperator",4]]],[11,"clone","","",10,[[],["binaryexpr",3]]],[11,"clone","","",13,[[],["unaryoperator",4]]],[11,"clone","","",11,[[],["unaryexpr",3]]],[11,"clone","libslide","",2,[[],["span",3]]],[11,"clone","libslide::scanner::types","",38,[[],["tokentype",4]]],[11,"clone","","",37,[[],["token",3]]],[11,"clone","libslide::evaluator_rules::registry","",63,[[],["rulename",4]]],[11,"clone","libslide::evaluator_rules::rule","",64,[[],["patternmap",3]]],[11,"clone","libslide::evaluator_rules::unbuilt_rule","",67,[[],["unbuiltrule",4]]],[11,"clone","libslide","",5,[[],["poly",3]]],[11,"clone","","",9,[[],["emitformat",4]]],[11,"clone","","",6,[[],["emitconfig",3]]],[11,"default","libslide::grammar::collectors","",20,[[],["varnamecollector",3]]],[11,"default","","",21,[[],["patterncollector",3]]],[11,"default","libslide","",3,[[]]],[11,"default","libslide::linter::expr_pat::similar_names","",48,[[],["namecollection",3]]],[11,"default","","",49,[[],["similarnameslinter",3]]],[11,"default","libslide::linter","",42,[[]]],[11,"default","libslide::partial_evaluator::validate::incompatible_definitions","",54,[[],["incompatibledefinitionsvalidator",3]]],[11,"default","libslide::evaluator_rules::pattern_match","",59,[[]]],[11,"default","libslide::evaluator_rules::registry","Constructs the default rule set.",61,[[]]],[11,"default","libslide","",5,[[],["poly",3]]],[11,"default","","",6,[[],["emitconfig",3]]],[11,"cmp","libslide::grammar::mem","",17,[[],["ordering",4]]],[11,"cmp","","",18,[[],["ordering",4]]],[11,"cmp","libslide","",7,[[],["ordering",4]]],[11,"cmp","libslide::grammar::statement","",25,[[],["ordering",4]]],[11,"cmp","libslide::grammar","",12,[[["binaryoperator",4]],["ordering",4]]],[11,"cmp","","",10,[[],["ordering",4]]],[11,"cmp","","",13,[[["unaryoperator",4]],["ordering",4]]],[11,"cmp","","",11,[[],["ordering",4]]],[11,"cmp","libslide","",2,[[],["ordering",4]]],[11,"cmp","libslide::linter::expr_pat::similar_names","",50,[[["namekind",4]],["ordering",4]]],[11,"cmp","libslide::evaluator_rules::registry","",63,[[],["ordering",4]]],[11,"cmp","libslide","",6,[[["emitconfig",3]],["ordering",4]]],[11,"eq","libslide::grammar::mem","",16,[[["internedstr",3]]]],[11,"ne","","",16,[[["internedstr",3]]]],[11,"eq","","",17,[[]]],[11,"eq","","",18,[[]]],[11,"eq","libslide","",7,[[["exprpat",4]]]],[11,"eq","libslide::grammar::statement","",25,[[["expr",4]]]],[11,"ne","","",25,[[["expr",4]]]],[11,"eq","libslide::grammar","",12,[[["binaryoperator",4]]]],[11,"eq","","",10,[[["binaryexpr",3]]]],[11,"ne","","",10,[[["binaryexpr",3]]]],[11,"eq","","",13,[[["unaryoperator",4]]]],[11,"eq","","",11,[[["unaryexpr",3]]]],[11,"ne","","",11,[[["unaryexpr",3]]]],[11,"eq","libslide","",2,[[["span",3]]]],[11,"ne","","",2,[[["span",3]]]],[11,"eq","libslide::diagnostics","",32,[[["diagnostickind",4]]]],[11,"eq","libslide::scanner::types","",38,[[["tokentype",4]]]],[11,"ne","","",38,[[["tokentype",4]]]],[11,"eq","","",37,[[["token",3]]]],[11,"ne","","",37,[[["token",3]]]],[11,"eq","libslide::linter::expr_pat::similar_names","",50,[[["namekind",4]]]],[11,"eq","libslide::evaluator_rules::registry","",63,[[["rulename",4]]]],[11,"eq","libslide::math::fraction","",68,[[["dec2fracerror",3]]]],[11,"ne","","",68,[[["dec2fracerror",3]]]],[11,"eq","libslide","",5,[[["poly",3]]]],[11,"ne","","",5,[[["poly",3]]]],[11,"eq","","",6,[[["emitconfig",3]]]],[11,"ne","","",6,[[["emitconfig",3]]]],[11,"partial_cmp","libslide::grammar::mem","",17,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",18,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","libslide","",7,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","libslide::grammar::statement","",25,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","libslide::grammar","",12,[[["binaryoperator",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",10,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",13,[[["unaryoperator",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",11,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","libslide","",2,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","libslide::linter::expr_pat::similar_names","",50,[[["namekind",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","libslide::evaluator_rules::registry","",63,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","libslide","",6,[[["emitconfig",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["emitconfig",3]]]],[11,"le","","",6,[[["emitconfig",3]]]],[11,"gt","","",6,[[["emitconfig",3]]]],[11,"ge","","",6,[[["emitconfig",3]]]],[11,"deref","libslide::grammar::mem","",14,[[],["rwlock",3]]],[11,"deref","","",15,[[],["internedstr",3]]],[11,"deref","","",17,[[]]],[11,"deref","","",18,[[]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","libslide","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::grammar::statement","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::grammar","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","libslide","",2,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::scanner::types","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::linter::expr_pat::similar_names","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::evaluator_rules::registry","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::evaluator_rules::rule","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::math::fraction","",68,[[["formatter",3]],["result",6]]],[11,"fmt","libslide","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::grammar::mem","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::scanner::types","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::linter::expr_pat::similar_names","",50,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::evaluator_rules::registry","",62,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::evaluator_rules::rule","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::math::fraction","",68,[[["formatter",3]],["result",6]]],[11,"fmt","libslide","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::grammar::statement","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::grammar","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","libslide","",7,[[["formatter",3]],["result",6]]],[11,"sub","","Returns the set difference of the two sets of flags.",6,[[["emitconfig",3]],["emitconfig",3]]],[11,"sub_assign","","Disables all flags enabled in the set.",6,[[["emitconfig",3]]]],[11,"not","","Returns the complement of this set of flags.",6,[[],["emitconfig",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",6,[[["emitconfig",3]],["emitconfig",3]]],[11,"bitor","","Returns the union of the two sets of flags.",6,[[["emitconfig",3]],["emitconfig",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",6,[[["emitconfig",3]],["emitconfig",3]]],[11,"bitand_assign","","Disables all flags disabled in the set.",6,[[["emitconfig",3]]]],[11,"bitor_assign","","Adds the set of flags.",6,[[["emitconfig",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",6,[[["emitconfig",3]]]],[11,"hash","libslide::grammar::mem","",16,[[]]],[11,"hash","","",17,[[]]],[11,"hash","","",18,[[]]],[11,"hash","libslide","",7,[[]]],[11,"hash","libslide::grammar::statement","",25,[[]]],[11,"hash","libslide::grammar","",12,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",13,[[]]],[11,"hash","","",11,[[]]],[11,"hash","libslide","",2,[[]]],[11,"hash","libslide::evaluator_rules::registry","",63,[[]]],[11,"hash","libslide","",6,[[]]],[11,"try_from","libslide::grammar","",12,[[["token",3]],["result",4]]],[11,"try_from","","",13,[[["token",3]],["result",4]]],[11,"from_iter","libslide","",6,[[["intoiterator",8]],["emitconfig",3]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"initialize","libslide::grammar::mem","",14,[[]]],[11,"initialize","","",15,[[]]]],"p":[[3,"Stmt"],[3,"StmtList"],[3,"Span"],[3,"ProgramContext"],[3,"EvaluationResult"],[3,"Poly"],[3,"EmitConfig"],[4,"ExprPat"],[4,"StmtKind"],[4,"EmitFormat"],[3,"BinaryExpr"],[3,"UnaryExpr"],[4,"BinaryOperator"],[4,"UnaryOperator"],[3,"INTERNED_STRS"],[3,"EMPTY_STR"],[3,"InternedStr"],[3,"RcExpr"],[3,"RcExprPat"],[8,"RcExpression"],[3,"VarNameCollector"],[3,"PatternCollector"],[3,"StmtListIterator"],[3,"Assignment"],[4,"AssignmentOp"],[4,"Expr"],[8,"Transformer"],[8,"ExpressionTransformer"],[8,"StmtVisitor"],[8,"ExprPatVisitor"],[3,"AssociatedDiagnostic"],[3,"Diagnostic"],[4,"DiagnosticKind"],[8,"DiagnosticRecord"],[8,"DiagnosticRegistry"],[3,"ScanResult"],[3,"Scanner"],[3,"Token"],[4,"TokenType"],[3,"ExpressionPatternParser"],[3,"ExpressionParser"],[8,"Parser"],[3,"LintConfig"],[4,"StmtLintRule"],[3,"HomogenousAssignmentLinter"],[3,"RedundantNestingLinter"],[3,"UnarySeriesLinter"],[4,"ExprPatLintRule"],[3,"NameCollection"],[3,"SimilarNamesLinter"],[4,"NameKind"],[8,"LintRule"],[4,"EqRelation"],[4,"PEValidator"],[3,"IncompatibleDefinitionsValidator"],[8,"Validator"],[3,"EagerVariableExpander"],[3,"LazyVariableExpander"],[8,"VariableExpander"],[3,"PatternMatch"],[8,"MatchRule"],[3,"RuleSet"],[3,"BuildRuleErrors"],[4,"RuleName"],[3,"PatternMap"],[3,"UnresolvedMapping"],[4,"Rule"],[4,"UnbuiltRule"],[3,"Dec2FracError"],[8,"Emit"],[4,"UnflattenStrategy"],[3,"PeekingTakeWhile"],[3,"PeekIter"],[8,"StringUtils"],[3,"ScanErrors"],[3,"InvalidToken"],[3,"ExtraTokens"],[3,"ExpectedExpr"],[3,"MismatchedClosingDelimiter"],[3,"IllegalPattern"],[3,"IllegalVariable"],[3,"UnmatchedClosingDelimiter"],[3,"ParseErrors"],[3,"IncompatibleDefinitions"],[3,"MaybeIncompatibleDefinitions"],[3,"PartialEvaluatorErrors"]]},\
"slide":{"doc":"The slide app. For an overview of slide\'s design, see…","i":[[3,"Opts","slide","Options to run slide with.",null,null],[12,"program","","Slide program.",0,null],[12,"emit_format","","How the result of slide\'s execution should be emitted.",0,null],[12,"emit_config","","Configuration options for slide emit.",0,null],[12,"lint","","When true, lint warnings for the program will be emitted,…",0,null],[12,"parse_only","","When true, slide will stop after parsing a program.",0,null],[12,"expr_pat","","When true, slide will expect the program to be an…",0,null],[12,"explain_diagnostic","","When is Some diagnostic code, will explain that code.",0,null],[12,"color","","When true, slide emit will be colored.",0,null],[3,"SlideResult","","Output of a slide execution.",null,null],[12,"code","","Exit code",1,null],[12,"stdout","","Emit for stdout",1,null],[12,"stderr","","Emit for stderr",1,null],[12,"page","","Whether the stdout should be emit as paged",1,null],[3,"SlideResultBuilder","","Builds a SlideResult.",null,null],[12,"file","","File the program is defined in. None if the program comes…",2,null],[12,"org_program","","Original slide program source code.",2,null],[12,"sanitized_program","","Program source code sanitized for diagnostic emission.",2,null],[12,"emit_format","","",2,null],[12,"emit_config","","",2,null],[12,"color","","",2,null],[12,"stdout","","",2,null],[12,"stderr","","",2,null],[12,"page","","",2,null],[3,"ProgramEvaluator","","Evaluates a slide program either as a regular program or…",null,null],[12,"result","","",3,null],[12,"tokens","","",3,null],[12,"lint","","",3,null],[12,"parse_only","","",3,null],[5,"get_opts","","Parses Opts from the command line or given a parser that…",null,[[],[["opts",3],["error",3],["result",4]]]],[5,"run_slide","","Runs slide end-to-end.",null,[[["opts",3]],["slideresult",3]]],[0,"diagnostics","","User-facing slide diagnostics.",null,null],[5,"sanitize_source_for_diagnostics","slide::diagnostics","",null,[[],["string",3]]],[5,"emit_slide_diagnostics","","",null,[[["option",4]],["string",3]]],[5,"convert_associated_diagnostic","","Converts a slide AssociatedDiagnostic to a SourceAnnotation.",null,[[["associateddiagnostic",3]],["annotation",3]]],[5,"convert_diagnostic_kind","","Converts a slide DiagnosticKind to an AnnotationType.",null,[[["diagnostickind",4]],["annotationtype",4]]],[11,"new","slide","",2,[[["option",4]]]],[11,"emit","","",2,[[["emit",8]]]],[11,"err","","",2,[[]]],[11,"page","","",2,[[]]],[11,"ok","","",2,[[],["slideresult",3]]],[11,"failed","","",2,[[],["slideresult",3]]],[11,"new","","",3,[[["token",3],["slideresultbuilder",3],["vec",3]]]],[11,"eval_slide_program","","Handles evaluation of a regular slide program (statements,…",3,[[],["slideresult",3]]],[11,"eval_expr_pat","","Handles evaluation of a slide expression pattern.",3,[[],["slideresult",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"default","","",1,[[],["slideresult",3]]]],"p":[[3,"Opts"],[3,"SlideResult"],[3,"SlideResultBuilder"],[3,"ProgramEvaluator"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);