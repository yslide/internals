(function() {var implementors = {};
implementors["libslide"] = [{"text":"impl RefUnwindSafe for Assignment","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for BinaryExpr&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternedStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RcExpr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StmtList","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UnaryExpr&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProgramContext","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ParseResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EvaluationResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poly","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmitConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprPat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StmtKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmitFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinaryOperator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryOperator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for INTERNED_STRS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EMPTY_STR","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RcExprPat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarNameCollector","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VarAsgnsCollector&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PatternCollector&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StmtListIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssignmentOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssociatedDiagnostic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanErrors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scanner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtraTokens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpectedExpr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MismatchedClosingDelimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IllegalPattern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IllegalVariable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnmatchedClosingDelimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseErrors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpressionPatternParser","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ExpressionParser&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LintConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StmtLintRule","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for HomogenousAssignmentLinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RedundantNestingLinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UnarySeriesLinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprPatLintRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NameCollection","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SimilarNamesLinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NameKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IncompatibleDefinitions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaybeIncompatibleDefinitions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PartialEvaluatorErrors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EqRelation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PEValidator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IncompatibleDefinitionsValidator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EagerVariableExpander&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for LazyVariableExpander&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for PatternMatch&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RuleSet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BuildRuleErrors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RuleName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnresolvedMapping","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnbuiltRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dec2FracError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnflattenStrategy","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for PeekingTakeWhile&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PeekIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slide"] = [{"text":"impl RefUnwindSafe for Opts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SlideResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SlideResultBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ProgramEvaluator&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["slide_ls"] = [{"text":"impl RefUnwindSafe for ProgramInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SlideLS","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ExprFinder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReferenceFinder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReferenceKind","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()