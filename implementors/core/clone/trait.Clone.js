(function() {var implementors = {};
implementors["libslide"] = [{"text":"impl Clone for InternedStr","synthetic":false,"types":[]},{"text":"impl Clone for RcExpr","synthetic":false,"types":[]},{"text":"impl Clone for RcExprPat","synthetic":false,"types":[]},{"text":"impl Clone for ExprPat","synthetic":false,"types":[]},{"text":"impl Clone for StmtList","synthetic":false,"types":[]},{"text":"impl Clone for StmtKind","synthetic":false,"types":[]},{"text":"impl Clone for Stmt","synthetic":false,"types":[]},{"text":"impl Clone for AssignmentOp","synthetic":false,"types":[]},{"text":"impl Clone for Assignment","synthetic":false,"types":[]},{"text":"impl Clone for Expr","synthetic":false,"types":[]},{"text":"impl Clone for BinaryOperator","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + RcExpression&gt; Clone for BinaryExpr&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UnaryOperator","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + RcExpression&gt; Clone for UnaryExpr&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for TokenType","synthetic":false,"types":[]},{"text":"impl Clone for Token","synthetic":false,"types":[]},{"text":"impl Clone for RuleName","synthetic":false,"types":[]},{"text":"impl Clone for PatternMap","synthetic":false,"types":[]},{"text":"impl Clone for UnbuiltRule","synthetic":false,"types":[]},{"text":"impl Clone for Poly","synthetic":false,"types":[]},{"text":"impl Clone for EmitFormat","synthetic":false,"types":[]},{"text":"impl Clone for EmitConfig","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()