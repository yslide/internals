(function() {var implementors = {};
implementors["libslide"] = [{"text":"impl Unpin for Stmt","synthetic":true,"types":[]},{"text":"impl Unpin for StmtList","synthetic":true,"types":[]},{"text":"impl Unpin for Span","synthetic":true,"types":[]},{"text":"impl Unpin for ProgramContext","synthetic":true,"types":[]},{"text":"impl Unpin for EvaluationResult","synthetic":true,"types":[]},{"text":"impl Unpin for Poly","synthetic":true,"types":[]},{"text":"impl Unpin for EmitConfig","synthetic":true,"types":[]},{"text":"impl Unpin for ExprPat","synthetic":true,"types":[]},{"text":"impl Unpin for StmtKind","synthetic":true,"types":[]},{"text":"impl Unpin for EmitFormat","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for BinaryExpr&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for UnaryExpr&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BinaryOperator","synthetic":true,"types":[]},{"text":"impl Unpin for UnaryOperator","synthetic":true,"types":[]},{"text":"impl Unpin for INTERNED_STRS","synthetic":true,"types":[]},{"text":"impl Unpin for EMPTY_STR","synthetic":true,"types":[]},{"text":"impl Unpin for InternedStr","synthetic":true,"types":[]},{"text":"impl Unpin for RcExpr","synthetic":true,"types":[]},{"text":"impl Unpin for RcExprPat","synthetic":true,"types":[]},{"text":"impl Unpin for StmtListIterator","synthetic":true,"types":[]},{"text":"impl Unpin for Assignment","synthetic":true,"types":[]},{"text":"impl Unpin for AssignmentOp","synthetic":true,"types":[]},{"text":"impl Unpin for Expr","synthetic":true,"types":[]},{"text":"impl Unpin for AssociatedDiagnostic","synthetic":true,"types":[]},{"text":"impl Unpin for Diagnostic","synthetic":true,"types":[]},{"text":"impl Unpin for DiagnosticKind","synthetic":true,"types":[]},{"text":"impl Unpin for ScanErrors","synthetic":true,"types":[]},{"text":"impl Unpin for ScanResult","synthetic":true,"types":[]},{"text":"impl Unpin for Scanner","synthetic":true,"types":[]},{"text":"impl Unpin for InvalidToken","synthetic":true,"types":[]},{"text":"impl Unpin for Token","synthetic":true,"types":[]},{"text":"impl Unpin for TokenType","synthetic":true,"types":[]},{"text":"impl Unpin for ExtraTokens","synthetic":true,"types":[]},{"text":"impl Unpin for ExpectedExpr","synthetic":true,"types":[]},{"text":"impl Unpin for MismatchedClosingDelimiter","synthetic":true,"types":[]},{"text":"impl Unpin for IllegalPattern","synthetic":true,"types":[]},{"text":"impl Unpin for IllegalVariable","synthetic":true,"types":[]},{"text":"impl Unpin for UnmatchedClosingDelimiter","synthetic":true,"types":[]},{"text":"impl Unpin for ParseErrors","synthetic":true,"types":[]},{"text":"impl Unpin for ExpressionPatternParser","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ExpressionParser&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for LintConfig","synthetic":true,"types":[]},{"text":"impl Unpin for StmtLintRule","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for HomogenousAssignmentLinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for RedundantNestingLinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for UnarySeriesLinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ExprPatLintRule","synthetic":true,"types":[]},{"text":"impl Unpin for NameCollection","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SimilarNamesLinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for NameKind","synthetic":true,"types":[]},{"text":"impl Unpin for IncompatibleDefinitions","synthetic":true,"types":[]},{"text":"impl Unpin for MaybeIncompatibleDefinitions","synthetic":true,"types":[]},{"text":"impl Unpin for PartialEvaluatorErrors","synthetic":true,"types":[]},{"text":"impl Unpin for VarNameCollector","synthetic":true,"types":[]},{"text":"impl Unpin for EqRelation","synthetic":true,"types":[]},{"text":"impl Unpin for PEValidator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for IncompatibleDefinitionsValidator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for EagerVariableExpander&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for LazyVariableExpander&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for PatternMatch&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for RuleSet","synthetic":true,"types":[]},{"text":"impl Unpin for BuildRuleErrors","synthetic":true,"types":[]},{"text":"impl Unpin for RuleName","synthetic":true,"types":[]},{"text":"impl Unpin for PatternMap","synthetic":true,"types":[]},{"text":"impl Unpin for UnresolvedMapping","synthetic":true,"types":[]},{"text":"impl Unpin for Rule","synthetic":true,"types":[]},{"text":"impl Unpin for UnbuiltRule","synthetic":true,"types":[]},{"text":"impl Unpin for Dec2FracError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for PatCollector&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for UnflattenStrategy","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Unpin for PeekingTakeWhile&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for PeekIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slide"] = [{"text":"impl Unpin for Opts","synthetic":true,"types":[]},{"text":"impl Unpin for SlideResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SlideResultBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ProgramEvaluator&lt;'a&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()