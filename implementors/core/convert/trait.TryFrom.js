(function() {var implementors = {};
implementors["libslide"] = [{"text":"impl&lt;'_&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'_ <a class=\"struct\" href=\"libslide/scanner/types/struct.Token.html\" title=\"struct libslide::scanner::types::Token\">Token</a>&gt; for <a class=\"enum\" href=\"libslide/grammar/enum.BinaryOperator.html\" title=\"enum libslide::grammar::BinaryOperator\">BinaryOperator</a>","synthetic":false,"types":["libslide::grammar::BinaryOperator"]},{"text":"impl&lt;'_&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'_ <a class=\"struct\" href=\"libslide/scanner/types/struct.Token.html\" title=\"struct libslide::scanner::types::Token\">Token</a>&gt; for <a class=\"enum\" href=\"libslide/grammar/enum.UnaryOperator.html\" title=\"enum libslide::grammar::UnaryOperator\">UnaryOperator</a>","synthetic":false,"types":["libslide::grammar::UnaryOperator"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()